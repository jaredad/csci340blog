<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/csci340blog/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/csci340blog/" rel="alternate" type="text/html" /><updated>2019-10-15T23:12:42-05:00</updated><id>http://localhost:4000/csci340blog/feed.xml</id><title type="html">Austin’s Blog</title><subtitle>This is my first blog, check it out!</subtitle><entry><title type="html">Web Frameworks</title><link href="http://localhost:4000/csci340blog/jekyll/update/2019/10/15/Web-Frameworks.html" rel="alternate" type="text/html" title="Web Frameworks" /><published>2019-10-15T06:18:25-05:00</published><updated>2019-10-15T06:18:25-05:00</updated><id>http://localhost:4000/csci340blog/jekyll/update/2019/10/15/Web-Frameworks</id><content type="html" xml:base="http://localhost:4000/csci340blog/jekyll/update/2019/10/15/Web-Frameworks.html">&lt;p&gt;Each framework offers its own merits for various projects. Here are my thoughts as these frameworks pertain to our project:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Ruby On Rails: This could be a good tool to use; however, its highly abstracted and there are some specific things we want to achieve with our project that may be harder to do in this framework.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ASP.Net: I like this framework because it is fairly reliable and has a good community behind it to help with any issues that could come about. I am only reticent from hearing first hand by people I trust that it was a nightmare for them.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Laravel: I like this option although I am reticent to learn PHP. It has a lot of upsides when it comes to ease of use and I like how websites could easily be scaled with this framework.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Flask: I’m not thrilled by this framework, I would rather go with django if I’m gonna use python because it’s a more used framework and has more documentation within the django community.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Express: I feel like I’d have to get out of my comfort zone to understand how to use this framework. Based on how it was described to me it doesn’t seem like something I can easily pick up and begin, rather I’d have to learn a lot before starting.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Each framework offers its own merits for various projects. Here are my thoughts as these frameworks pertain to our project:</summary></entry><entry><title type="html">ER Diagram</title><link href="http://localhost:4000/csci340blog/jekyll/update/2019/10/02/Entity-Relationship-Diagram.html" rel="alternate" type="text/html" title="ER Diagram" /><published>2019-10-02T00:00:00-05:00</published><updated>2019-10-02T00:00:00-05:00</updated><id>http://localhost:4000/csci340blog/jekyll/update/2019/10/02/Entity-Relationship-Diagram</id><content type="html" xml:base="http://localhost:4000/csci340blog/jekyll/update/2019/10/02/Entity-Relationship-Diagram.html">&lt;p&gt;To start I would say this ER Diagram was more difficult than I thought it would be. There is a lot of planning that needs to be done when thinking about what your database should look like. The assumptions I made in my diagram was that I assumed these databases were stored on the auction company website, so all the information would be stored there for them. I also assumed the 5% that the company gets would be handled in code and not in the database necessarily. I did not feel that there was much information about the auction company that justified a table in the schema. My implementation, as seen below, is quite simple and perhaps could be more complex. I just wanted to make sure the relationships between each table made sense and wouldn’t cause major database issues. I believe I have managed to avoid any lists inside a column, as well as making sure only primary keys are shared as foreign keys from table to table. My draw.io is less sensible than my vertabelo diagram because I was still trying to figure out what to do when I was working on the draw.io schema.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://1.bp.blogspot.com/-4WvkmyhumEw/XZV0rBZW3SI/AAAAAAAAAAo/F-McNVy9wt4BF0ObS8mvBaOk9q8rZyD_QCLcBGAsYHQ/s1600/drawio.PNG&quot; alt=&quot;draw.io&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://1.bp.blogspot.com/-aV-mNzqJ5Qo/XZV0rHw860I/AAAAAAAAAAs/UmiuBMqJaJUTozTHBEJOM3eQeg4gWB5jwCLcBGAsYHQ/s1600/vertabelo.PNG&quot; alt=&quot;vertabelo&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">To start I would say this ER Diagram was more difficult than I thought it would be. There is a lot of planning that needs to be done when thinking about what your database should look like. The assumptions I made in my diagram was that I assumed these databases were stored on the auction company website, so all the information would be stored there for them. I also assumed the 5% that the company gets would be handled in code and not in the database necessarily. I did not feel that there was much information about the auction company that justified a table in the schema. My implementation, as seen below, is quite simple and perhaps could be more complex. I just wanted to make sure the relationships between each table made sense and wouldn’t cause major database issues. I believe I have managed to avoid any lists inside a column, as well as making sure only primary keys are shared as foreign keys from table to table. My draw.io is less sensible than my vertabelo diagram because I was still trying to figure out what to do when I was working on the draw.io schema.</summary></entry><entry><title type="html">Blog Theme Post</title><link href="http://localhost:4000/csci340blog/jekyll/update/2019/09/25/Blog-Theme-Post.html" rel="alternate" type="text/html" title="Blog Theme Post" /><published>2019-09-25T01:44:25-05:00</published><updated>2019-09-25T01:44:25-05:00</updated><id>http://localhost:4000/csci340blog/jekyll/update/2019/09/25/Blog-Theme-Post</id><content type="html" xml:base="http://localhost:4000/csci340blog/jekyll/update/2019/09/25/Blog-Theme-Post.html">&lt;p&gt;&lt;img src=&quot;https://image.shutterstock.com/image-vector/stressed-cartoon-business-woman-office-260nw-1222467187.jpg&quot; alt=&quot;Stress 2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I found this lab to be the most difficult we have had thus far, and I’m glad to be finished with it. It was neat to see the end result of having a new theme for my jekyll blog. I have never worked with Jekyll blogs so everything about this lab was new to me. I’m looking forward to seeing what more we will do with the blogs. Here are a few links that I used for this project:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://yadielcabrera.com/2019/04/28/stress-relieving-tips-for-computer-science-students/&quot;&gt;Comp-sci stress managements&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jekyllrb.com/docs/themes/#overriding-theme-defaults&quot;&gt;Overriding jekyll default theme&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apa.org/images/stress-kinds-title-image_tcm7-230111.jpg&quot; alt=&quot;Stress 1&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">Introduction Post</title><link href="http://localhost:4000/csci340blog/jekyll/update/2019/09/18/Introduction-Post.html" rel="alternate" type="text/html" title="Introduction Post" /><published>2019-09-18T06:18:25-05:00</published><updated>2019-09-18T06:18:25-05:00</updated><id>http://localhost:4000/csci340blog/jekyll/update/2019/09/18/Introduction-Post</id><content type="html" xml:base="http://localhost:4000/csci340blog/jekyll/update/2019/09/18/Introduction-Post.html">&lt;p&gt;I found the tutorials given by Dr. Goadrich were very helpful in getting my Jekyll blog up and running. I had some difficulties when I tried to create my blog, because I needed to install extra gems to start the local server:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://rubygems.org/gems/jekyll/versions/3.8.5&quot;&gt;jekyll gem&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.rubydoc.info/gems/tzinfo/file/README.md&quot;&gt;tzinfo gem&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pekalicious.github.io/jekyll/2019/01/06/02-could-not-find-wdm.html&quot;&gt;wdm gem&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I also had to learn some syntax things in git bash and gitkraken, which took a little bit of time to figure out. I spaced my project over the course of a few days, implementing a bit at a time. I am looking forward to seeing how we use this blog in the course. I am happy that I was able to create something that anyone can access online for free.&lt;/p&gt;</content><author><name></name></author><summary type="html">I found the tutorials given by Dr. Goadrich were very helpful in getting my Jekyll blog up and running. I had some difficulties when I tried to create my blog, because I needed to install extra gems to start the local server:</summary></entry></feed>